<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.minol.repository.MeterDataMapper" >
    <!--获取实时数据-->
    <select id="getMeterData" parameterType="map" resultType="com.minol.domain.entity.MeterData">
      SELECT
      ml.id as meter_id,
        zs.z_name,
        b.b_name,
        ml.meter_addr,
        CASE
        WHEN ms.meter_type=1 THEN '小区总表'
        WHEN ms.meter_type=2 THEN '楼宇栋表'
        WHEN ms.meter_type=3 THEN '单元总表'
        ELSE '未设置' END as meter_type,
        CASE
            WHEN ms.meter_type=1 THEN zs.z_name
            WHEN ms.meter_type=2 THEN (select b.b_name from meter_sub m,builds b where b.id=m.sub_id and m.meter_id=ml.id)
            WHEN ms.meter_type=3 THEN (select b.b_name from meter_sub m,builds b,units u where u.id=m.sub_id and b.id=u.build_id and m.meter_id=ml.id)
            ELSE '未设置' END as location,
        ms.sub_id,
        md.meter_id,
        md.meter_datatime,
        md.cu_heat,
        md.heat_power,
        md.cu_flow,
        md.flow_rate,
        md.entrance_temp,
        md.exit_temp,
        md.diff_temp,
        md.battery_status,
        md.hours,
        md.err_list
    FROM
        zones AS zs
        LEFT OUTER JOIN meter_list AS ml ON ml.zone_id = zs.id
        LEFT OUTER JOIN meter_sub AS ms ON ms.meter_id = ml.id
        LEFT OUTER JOIN builds  AS b ON ms.sub_id = b.id
        LEFT OUTER JOIN meter_data AS md ON md.meter_id = ml.id
    WHERE
        zs.id = #{zoneId}
        <if test="buildId!=null">
            AND b.id=#{buildId}
        </if>
        <if test="meterId!=null">
            AND md.id=#{meterId}
        </if>
        And md.meter_datatime between #{startDate} and #{endDate}
        ORDER BY md.meter_datatime DESC
    </select>
    <!--获取大表的能耗分析-->
    <select id="getBuildMeterECA" parameterType="map" resultType="com.minol.domain.entity.MeterECA">
         select z.z_name,b.b_name,ml.meter_addr,room_info.area, meter_use.maxHeat,meter_use.minHeat,meter_use.useHeat,
        ROUND(IFNULL(meter_use.useHeat/room_info.area,0),2) as avgHeat,
        ROUND(meter_use.avg_in_temp,2) as avg_in_temp,
        ROUND(meter_use.avg_out_temp,2) as avg_out_temp
        from meter_sub ms
        LEFT JOIN meter_list ml on ms.meter_id=ml.id
        LEFT JOIN builds b on ms.sub_id=b.id
        LEFT JOIN zones z on ml.zone_id=z.id
        LEFT JOIN (
            select b.id,SUM(r.area) as area from builds b,units u,rooms r
          where r.unit_id=u.id and u.build_id=b.id
            GROUP BY b.id
        ) as room_info on b.id=room_info.id
        LEFT JOIN (
            select md.meter_id, MAX(md.cu_heat) as maxHeat,
           MIN(md.cu_heat) as minHeat,
          (MAX(md.cu_heat)-MIN(md.cu_heat)) AS useHeat,
            avg(md.entrance_temp) avg_in_temp,
            avg(md.exit_temp) avg_out_temp
            FROM meter_data md
          where md.meter_datatime BETWEEN #{startDate} and #{endDate}
          GROUP BY md.meter_id
        ) as meter_use on meter_use.meter_id=ml.id
        WHERE
        z.id = #{zoneId}
        <if test="buildId!=null">
            AND b.id=#{buildId}
        </if>
        <if test="meterId!=null">
            AND ml.meter_id=#{meterId}
        </if>
    </select>

</mapper>